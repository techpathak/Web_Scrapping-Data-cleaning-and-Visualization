# importing modules 
import requests 
from bs4 import BeautifulSoup 
  
# URL for scrapping data 
url = 'https://www.worldometers.info/coronavirus/countries-where-coronavirus-has-spread/'
  
# get URL html 
page = requests.get(url) 
soup = BeautifulSoup(page.text, 'html.parser') 
  
data = [] 
  
# soup.find_all('td') will scrape every element in the url's table 
data_iterator = iter(soup.find_all('td'))  
# data_iterator is the iterator of the table 
  
# This loop will keep repeating till there is data available in the iterator 
while True: 
    try: 
        country = next(data_iterator).text 
        confirmed = next(data_iterator).text 
        deaths = next(data_iterator).text 
        continent = next(data_iterator).text 
  
        # For 'confirmed' and 'deaths', make sure to remove the commas and convert to int 
        data.append(( 
            country, 
            (confirmed.replace(', ', '')), 
            (deaths.replace(',', '')), 
            continent
        )) 
    # StopIteration error is raised when there are no more elements left to iterate through 
    except StopIteration: 
        break
       
 # Sort the data by the number of confirmed cases 
data.sort(key = lambda row: row[1], reverse = True) 

import pandas as pd
dff=pd.DataFrame(data,columns=['country','Number of cases','Deaths','Continment'],dtype=float)
dff.head()

dff['Number of cases'] = [x.replace(',', '') for x in dff['Number of cases']]
dff['Number of cases'] = pd.to_numeric(dff['Number of cases'])
dff

dfff=dff.sort_values(by='Number of cases',ascending=False)
dfff['Death_rate']= (dfff['Deaths']/dfff['Number of cases'])*100
dfff.head()

## Data Visualization

import seaborn as sns
import matplotlib.pyplot as plt
from pylab import rcParams
rcParams['figure.figsize'] = 15, 10
from matplotlib.pyplot import figure
figure(num=None, figsize=(20, 6), dpi=80, facecolor='w', edgecolor='k')
sns.pairplot(dfff,hue='Continment')

sns.barplot(x='country',y='Number of cases',data=dfff.head(10))


# Table

import texttable as tt
# create texttable object 

table = tt.Texttable() 
table.add_rows([(None, None, None, None)] + data)  # Add an empty row at the beginning for the headers 
table.set_cols_align(('c', 'c', 'c', 'c'))  # 'l' denotes left, 'c' denotes center, and 'r' denotes right 
table.header((' Country ', ' Number of cases ', ' Deaths ', ' Continent ')) 
  
print(table.draw()) 
